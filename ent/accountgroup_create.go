// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-consumer/ent/accountgroup"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AccountGroupCreate is the builder for creating a AccountGroup entity.
type AccountGroupCreate struct {
	config
	mutation *AccountGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDisplayName sets the "display_name" field.
func (agc *AccountGroupCreate) SetDisplayName(s string) *AccountGroupCreate {
	agc.mutation.SetDisplayName(s)
	return agc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (agc *AccountGroupCreate) SetNillableDisplayName(s *string) *AccountGroupCreate {
	if s != nil {
		agc.SetDisplayName(*s)
	}
	return agc
}

// SetExternalID sets the "external_id" field.
func (agc *AccountGroupCreate) SetExternalID(s string) *AccountGroupCreate {
	agc.mutation.SetExternalID(s)
	return agc
}

// SetCreatedAt sets the "created_at" field.
func (agc *AccountGroupCreate) SetCreatedAt(t time.Time) *AccountGroupCreate {
	agc.mutation.SetCreatedAt(t)
	return agc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agc *AccountGroupCreate) SetNillableCreatedAt(t *time.Time) *AccountGroupCreate {
	if t != nil {
		agc.SetCreatedAt(*t)
	}
	return agc
}

// SetID sets the "id" field.
func (agc *AccountGroupCreate) SetID(u uuid.UUID) *AccountGroupCreate {
	agc.mutation.SetID(u)
	return agc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (agc *AccountGroupCreate) SetNillableID(u *uuid.UUID) *AccountGroupCreate {
	if u != nil {
		agc.SetID(*u)
	}
	return agc
}

// Mutation returns the AccountGroupMutation object of the builder.
func (agc *AccountGroupCreate) Mutation() *AccountGroupMutation {
	return agc.mutation
}

// Save creates the AccountGroup in the database.
func (agc *AccountGroupCreate) Save(ctx context.Context) (*AccountGroup, error) {
	agc.defaults()
	return withHooks(ctx, agc.sqlSave, agc.mutation, agc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (agc *AccountGroupCreate) SaveX(ctx context.Context) *AccountGroup {
	v, err := agc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agc *AccountGroupCreate) Exec(ctx context.Context) error {
	_, err := agc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agc *AccountGroupCreate) ExecX(ctx context.Context) {
	if err := agc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agc *AccountGroupCreate) defaults() {
	if _, ok := agc.mutation.CreatedAt(); !ok {
		v := accountgroup.DefaultCreatedAt()
		agc.mutation.SetCreatedAt(v)
	}
	if _, ok := agc.mutation.ID(); !ok {
		v := accountgroup.DefaultID()
		agc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agc *AccountGroupCreate) check() error {
	if _, ok := agc.mutation.ExternalID(); !ok {
		return &ValidationError{Name: "external_id", err: errors.New(`ent: missing required field "AccountGroup.external_id"`)}
	}
	if _, ok := agc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccountGroup.created_at"`)}
	}
	return nil
}

func (agc *AccountGroupCreate) sqlSave(ctx context.Context) (*AccountGroup, error) {
	if err := agc.check(); err != nil {
		return nil, err
	}
	_node, _spec := agc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	agc.mutation.id = &_node.ID
	agc.mutation.done = true
	return _node, nil
}

func (agc *AccountGroupCreate) createSpec() (*AccountGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountGroup{config: agc.config}
		_spec = sqlgraph.NewCreateSpec(accountgroup.Table, sqlgraph.NewFieldSpec(accountgroup.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = agc.conflict
	if id, ok := agc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := agc.mutation.DisplayName(); ok {
		_spec.SetField(accountgroup.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := agc.mutation.ExternalID(); ok {
		_spec.SetField(accountgroup.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := agc.mutation.CreatedAt(); ok {
		_spec.SetField(accountgroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccountGroup.Create().
//		SetDisplayName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountGroupUpsert) {
//			SetDisplayName(v+v).
//		}).
//		Exec(ctx)
func (agc *AccountGroupCreate) OnConflict(opts ...sql.ConflictOption) *AccountGroupUpsertOne {
	agc.conflict = opts
	return &AccountGroupUpsertOne{
		create: agc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccountGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agc *AccountGroupCreate) OnConflictColumns(columns ...string) *AccountGroupUpsertOne {
	agc.conflict = append(agc.conflict, sql.ConflictColumns(columns...))
	return &AccountGroupUpsertOne{
		create: agc,
	}
}

type (
	// AccountGroupUpsertOne is the builder for "upsert"-ing
	//  one AccountGroup node.
	AccountGroupUpsertOne struct {
		create *AccountGroupCreate
	}

	// AccountGroupUpsert is the "OnConflict" setter.
	AccountGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetDisplayName sets the "display_name" field.
func (u *AccountGroupUpsert) SetDisplayName(v string) *AccountGroupUpsert {
	u.Set(accountgroup.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *AccountGroupUpsert) UpdateDisplayName() *AccountGroupUpsert {
	u.SetExcluded(accountgroup.FieldDisplayName)
	return u
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *AccountGroupUpsert) ClearDisplayName() *AccountGroupUpsert {
	u.SetNull(accountgroup.FieldDisplayName)
	return u
}

// SetExternalID sets the "external_id" field.
func (u *AccountGroupUpsert) SetExternalID(v string) *AccountGroupUpsert {
	u.Set(accountgroup.FieldExternalID, v)
	return u
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *AccountGroupUpsert) UpdateExternalID() *AccountGroupUpsert {
	u.SetExcluded(accountgroup.FieldExternalID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AccountGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(accountgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccountGroupUpsertOne) UpdateNewValues() *AccountGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(accountgroup.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(accountgroup.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccountGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccountGroupUpsertOne) Ignore() *AccountGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountGroupUpsertOne) DoNothing() *AccountGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountGroupCreate.OnConflict
// documentation for more info.
func (u *AccountGroupUpsertOne) Update(set func(*AccountGroupUpsert)) *AccountGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *AccountGroupUpsertOne) SetDisplayName(v string) *AccountGroupUpsertOne {
	return u.Update(func(s *AccountGroupUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *AccountGroupUpsertOne) UpdateDisplayName() *AccountGroupUpsertOne {
	return u.Update(func(s *AccountGroupUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *AccountGroupUpsertOne) ClearDisplayName() *AccountGroupUpsertOne {
	return u.Update(func(s *AccountGroupUpsert) {
		s.ClearDisplayName()
	})
}

// SetExternalID sets the "external_id" field.
func (u *AccountGroupUpsertOne) SetExternalID(v string) *AccountGroupUpsertOne {
	return u.Update(func(s *AccountGroupUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *AccountGroupUpsertOne) UpdateExternalID() *AccountGroupUpsertOne {
	return u.Update(func(s *AccountGroupUpsert) {
		s.UpdateExternalID()
	})
}

// Exec executes the query.
func (u *AccountGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountGroupUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AccountGroupUpsertOne.ID is not supported by MySQL driver. Use AccountGroupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountGroupUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountGroupCreateBulk is the builder for creating many AccountGroup entities in bulk.
type AccountGroupCreateBulk struct {
	config
	builders []*AccountGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the AccountGroup entities in the database.
func (agcb *AccountGroupCreateBulk) Save(ctx context.Context) ([]*AccountGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(agcb.builders))
	nodes := make([]*AccountGroup, len(agcb.builders))
	mutators := make([]Mutator, len(agcb.builders))
	for i := range agcb.builders {
		func(i int, root context.Context) {
			builder := agcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agcb *AccountGroupCreateBulk) SaveX(ctx context.Context) []*AccountGroup {
	v, err := agcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agcb *AccountGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := agcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agcb *AccountGroupCreateBulk) ExecX(ctx context.Context) {
	if err := agcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccountGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountGroupUpsert) {
//			SetDisplayName(v+v).
//		}).
//		Exec(ctx)
func (agcb *AccountGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountGroupUpsertBulk {
	agcb.conflict = opts
	return &AccountGroupUpsertBulk{
		create: agcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccountGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agcb *AccountGroupCreateBulk) OnConflictColumns(columns ...string) *AccountGroupUpsertBulk {
	agcb.conflict = append(agcb.conflict, sql.ConflictColumns(columns...))
	return &AccountGroupUpsertBulk{
		create: agcb,
	}
}

// AccountGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of AccountGroup nodes.
type AccountGroupUpsertBulk struct {
	create *AccountGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AccountGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(accountgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccountGroupUpsertBulk) UpdateNewValues() *AccountGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(accountgroup.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(accountgroup.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccountGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccountGroupUpsertBulk) Ignore() *AccountGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountGroupUpsertBulk) DoNothing() *AccountGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountGroupCreateBulk.OnConflict
// documentation for more info.
func (u *AccountGroupUpsertBulk) Update(set func(*AccountGroupUpsert)) *AccountGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *AccountGroupUpsertBulk) SetDisplayName(v string) *AccountGroupUpsertBulk {
	return u.Update(func(s *AccountGroupUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *AccountGroupUpsertBulk) UpdateDisplayName() *AccountGroupUpsertBulk {
	return u.Update(func(s *AccountGroupUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *AccountGroupUpsertBulk) ClearDisplayName() *AccountGroupUpsertBulk {
	return u.Update(func(s *AccountGroupUpsert) {
		s.ClearDisplayName()
	})
}

// SetExternalID sets the "external_id" field.
func (u *AccountGroupUpsertBulk) SetExternalID(v string) *AccountGroupUpsertBulk {
	return u.Update(func(s *AccountGroupUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *AccountGroupUpsertBulk) UpdateExternalID() *AccountGroupUpsertBulk {
	return u.Update(func(s *AccountGroupUpsert) {
		s.UpdateExternalID()
	})
}

// Exec executes the query.
func (u *AccountGroupUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccountGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
