// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-consumer/ent/accountgroup"
	"go-consumer/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountGroupUpdate is the builder for updating AccountGroup entities.
type AccountGroupUpdate struct {
	config
	hooks    []Hook
	mutation *AccountGroupMutation
}

// Where appends a list predicates to the AccountGroupUpdate builder.
func (agu *AccountGroupUpdate) Where(ps ...predicate.AccountGroup) *AccountGroupUpdate {
	agu.mutation.Where(ps...)
	return agu
}

// SetDisplayName sets the "display_name" field.
func (agu *AccountGroupUpdate) SetDisplayName(s string) *AccountGroupUpdate {
	agu.mutation.SetDisplayName(s)
	return agu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (agu *AccountGroupUpdate) SetNillableDisplayName(s *string) *AccountGroupUpdate {
	if s != nil {
		agu.SetDisplayName(*s)
	}
	return agu
}

// ClearDisplayName clears the value of the "display_name" field.
func (agu *AccountGroupUpdate) ClearDisplayName() *AccountGroupUpdate {
	agu.mutation.ClearDisplayName()
	return agu
}

// SetExternalID sets the "external_id" field.
func (agu *AccountGroupUpdate) SetExternalID(s string) *AccountGroupUpdate {
	agu.mutation.SetExternalID(s)
	return agu
}

// Mutation returns the AccountGroupMutation object of the builder.
func (agu *AccountGroupUpdate) Mutation() *AccountGroupMutation {
	return agu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agu *AccountGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, agu.sqlSave, agu.mutation, agu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agu *AccountGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := agu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agu *AccountGroupUpdate) Exec(ctx context.Context) error {
	_, err := agu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agu *AccountGroupUpdate) ExecX(ctx context.Context) {
	if err := agu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (agu *AccountGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountgroup.Table, accountgroup.Columns, sqlgraph.NewFieldSpec(accountgroup.FieldID, field.TypeUUID))
	if ps := agu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agu.mutation.DisplayName(); ok {
		_spec.SetField(accountgroup.FieldDisplayName, field.TypeString, value)
	}
	if agu.mutation.DisplayNameCleared() {
		_spec.ClearField(accountgroup.FieldDisplayName, field.TypeString)
	}
	if value, ok := agu.mutation.ExternalID(); ok {
		_spec.SetField(accountgroup.FieldExternalID, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, agu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agu.mutation.done = true
	return n, nil
}

// AccountGroupUpdateOne is the builder for updating a single AccountGroup entity.
type AccountGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountGroupMutation
}

// SetDisplayName sets the "display_name" field.
func (aguo *AccountGroupUpdateOne) SetDisplayName(s string) *AccountGroupUpdateOne {
	aguo.mutation.SetDisplayName(s)
	return aguo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (aguo *AccountGroupUpdateOne) SetNillableDisplayName(s *string) *AccountGroupUpdateOne {
	if s != nil {
		aguo.SetDisplayName(*s)
	}
	return aguo
}

// ClearDisplayName clears the value of the "display_name" field.
func (aguo *AccountGroupUpdateOne) ClearDisplayName() *AccountGroupUpdateOne {
	aguo.mutation.ClearDisplayName()
	return aguo
}

// SetExternalID sets the "external_id" field.
func (aguo *AccountGroupUpdateOne) SetExternalID(s string) *AccountGroupUpdateOne {
	aguo.mutation.SetExternalID(s)
	return aguo
}

// Mutation returns the AccountGroupMutation object of the builder.
func (aguo *AccountGroupUpdateOne) Mutation() *AccountGroupMutation {
	return aguo.mutation
}

// Where appends a list predicates to the AccountGroupUpdate builder.
func (aguo *AccountGroupUpdateOne) Where(ps ...predicate.AccountGroup) *AccountGroupUpdateOne {
	aguo.mutation.Where(ps...)
	return aguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aguo *AccountGroupUpdateOne) Select(field string, fields ...string) *AccountGroupUpdateOne {
	aguo.fields = append([]string{field}, fields...)
	return aguo
}

// Save executes the query and returns the updated AccountGroup entity.
func (aguo *AccountGroupUpdateOne) Save(ctx context.Context) (*AccountGroup, error) {
	return withHooks(ctx, aguo.sqlSave, aguo.mutation, aguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aguo *AccountGroupUpdateOne) SaveX(ctx context.Context) *AccountGroup {
	node, err := aguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aguo *AccountGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := aguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aguo *AccountGroupUpdateOne) ExecX(ctx context.Context) {
	if err := aguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aguo *AccountGroupUpdateOne) sqlSave(ctx context.Context) (_node *AccountGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountgroup.Table, accountgroup.Columns, sqlgraph.NewFieldSpec(accountgroup.FieldID, field.TypeUUID))
	id, ok := aguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountgroup.FieldID)
		for _, f := range fields {
			if !accountgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aguo.mutation.DisplayName(); ok {
		_spec.SetField(accountgroup.FieldDisplayName, field.TypeString, value)
	}
	if aguo.mutation.DisplayNameCleared() {
		_spec.ClearField(accountgroup.FieldDisplayName, field.TypeString)
	}
	if value, ok := aguo.mutation.ExternalID(); ok {
		_spec.SetField(accountgroup.FieldExternalID, field.TypeString, value)
	}
	_node = &AccountGroup{config: aguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aguo.mutation.done = true
	return _node, nil
}
